;; time the loading of the .emacs
;; keep this on top of your .emacs
(defvar *emacs-load-start* (current-time))
(defun anarcat/time-to-ms (time)
  (+ (* (+ (* (car time) (expt 2 16)) (car (cdr time))) 1000000) (car (cdr (cdr time)))))
(defun anarcat/display-timing ()
  (message ".emacs loaded in %fms" (/ (- (anarcat/time-to-ms (current-time)) (anarcat/time-to-ms *emacs-load-start*)) 1000000.0)))
(add-hook 'after-init-hook 'anarcat/display-timing t)

(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize)

(eval-when-compile
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package))

(setq backup-directory-alist
  `(("." . ,(concat user-emacs-directory "backups"))))

(setq inhibit-startup-echo-area-message "llaw")
(setq gc-cons-threshold 50000000)

;; Shorten prompts to expecting y/n instead of the full 'yes' or 'no'.
(fset 'yes-or-no-p 'y-or-n-p)

;; Always use spaces when indenting!
(setq-default indent-tabs-mode nil)

(setq show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-highlight-openparen t)
(setq show-paren-when-point-in-periphery t)
(setq show-paren-when-point-inside-paren t)
(setq truncate-lines t)

;; Why doesn't this fire when we run dired?
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            (dired-omit-mode 1)
            ))


(server-start)


(use-package counsel-gtags
  :ensure t)

(add-to-list 'display-buffer-alist
             `(,
	       (rx bos "*Flycheck errors*" eos)
	       (display-buffer-reuse-window display-buffer-in-side-window)
	       (side            . bottom)
	       (reusable-frames . visible)
	       (window-height   . 0.20)
	       ))


(use-package ggtags
  :ensure t)

(use-package yasnippet
  :ensure t
  :config (yas-global-mode 1))

;; (use-package csharp-mode
;;   :ensure t)

(use-package yasnippet-snippets
  :requires yasnippet
  :ensure t)

(use-package delight
  :ensure t)

(use-package ibuffer
  :bind
  ("C-x C-b" . 'ibuffer))

(use-package ibuffer-projectile
  :ensure t
  :after (ibuffer projectile)
  :config
  (add-hook 'ibuffer-hook
    (lambda ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))))
  )

(use-package markdown-mode
  :ensure t)

(use-package mmm-jinja2
  :ensure t)

;; Configure auto-loading somehow?
(use-package salt-mode
  :ensure t)

(use-package mmm-mode
  :ensure t)
(use-package mmm-mako
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.mako\\'" . html-mode))
  (mmm-add-mode-ext-class 'html-mode "\\.mako\\'" 'mako))

(use-package zenburn-theme
  :ensure t)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-night t)
  )

;; (use-package emmet-mode
;;   :ensure t
;;   :config
;;   (add-hook 'sgml-mode-hook 'emmet-mode)
;;   (add-hook 'css-mode-hook  'emmet-mode)
;;   (setq emmet-self-closing-tag-style " /"))


;; (use-package company-ctags
;;   :after company
;;   :ensure t
;;   )

(use-package company
  :ensure t
  :delight
  :config
  ;; (add-hook 'after-init-hook 'global-company-mode))
  (setq company-idle-delay 0.1)
  (add-hook 'python-mode-hook 'company-mode)
  )

;; (use-package lsp-mode
;;   :ensure t
;;   )

;; (use-package lsp-ui
;;   :ensure t
;;   :after lsp-mode
;;   :config
;;   (add-hook 'lsp-mode-hook 'lsp-ui-mode)
;;   )

;; (use-package company-lsp
;;   :ensure t
;;   :after (company lsp-mode)
;;   :config
;;   (message "Loaded company-lsp")
;;   (push 'company-lsp company-backends))

;; (use-package lsp-python
;;   :ensure t
;;   :after (python lsp-mode)
;;   :config
;;   (add-hook 'python-mode-hook #'lsp-python-enable)
;;   ;; NB: only required if you prefer flake8 instead of the default
;;   ;; send pyls config via lsp-after-initialize-hook -- harmless for
;;   ;; other servers due to pyls key, but would prefer only sending this
;;   ;; when pyls gets initialised (:initialize function in
;;   ;; lsp-define-stdio-client is invoked too early (before server
;;   ;; start)) -- cpbotha
;;   (defun lsp-set-cfg ()
;;     (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
;;       ;; TODO: check lsp--cur-workspace here to decide per server / project
;;       (lsp--set-configuration lsp-cfg)))

;;   (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))


(use-package company-jedi
  :ensure t
  :bind
  ("C-x j d" . 'jedi:goto-definition)
  ("C-x j p" . 'jedi:goto-definition-pop-marker)
  :config
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (add-hook 'python-mode-hook #'flycheck-mode))

;; Also enables a column number display, so we don't need column-number-mode
(use-package powerline
  :ensure t
  :config
  (defun powerline-default-theme ()
  "Setup the default mode-line."
  (interactive)
  (setq powerline-image-apple-rgb t)
  (setq powerline-gui-use-vcs-glyph t)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face0 (if active 'powerline-active0 'powerline-inactive0))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left (intern (format "powerline-%s-%s"
  							  (powerline-current-separator)
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           (powerline-current-separator)
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list (powerline-raw "%*" face0 'l)
                                     (when powerline-display-buffer-size
                                       (powerline-buffer-size face0 'l))
                                     (when powerline-display-mule-info
                                       (powerline-raw mode-line-mule-info face0 'l))
                                     (powerline-buffer-id `(mode-line-buffer-id ,face0) 'l)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format face0 'l))
                                     (powerline-raw " " face0)
                                     (funcall separator-left face0 face1)
                                     (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                       (powerline-raw erc-modified-channels-object face1 'l))
                                     (powerline-major-mode face1 'l)
                                     (powerline-process face1)
                                     (powerline-minor-modes face1 'l)
                                     (powerline-narrow face1 'l)
                                     (powerline-raw " " face1)
                                     (funcall separator-left face1 face2)
                                     (powerline-vc face2 'r)
                                     (when (bound-and-true-p nyan-mode)
                                       (powerline-raw (list (nyan-create)) face2 'l))))
                          (rhs (list (powerline-raw global-mode-string face2 'r)
                                     (funcall separator-right face2 face1)
  				     (unless window-system
  				       (powerline-raw (char-to-string #xe0a1) face1 'l))
  				     (powerline-raw "%5l " face1 'l)
                                     ;; Showing columns will make editing slow... so let's not.
  				     ;; (powerline-raw ":" face1 'l)
  				     ;; (powerline-raw "%3c" face1 'r)
  				     (funcall separator-right face1 face0)
  				     (powerline-raw " " face0)
  				     (powerline-raw "%6p " face0 'r)
                                     (when powerline-display-hud
                                       (powerline-hud face0 face2))
  				     (powerline-fill face0 0)
  				     )))
  		     (concat (powerline-render lhs)
  			     (powerline-fill face2 (powerline-width rhs))
  			     (powerline-render rhs)))))))
  (powerline-default-theme))

(defun initialize-js ()
  "Initialize javascript variables."
  (setq js-indent-level 2)
  )


(use-package magit
  :ensure t
  )

(use-package vue-mode
  :ensure t
  :mode "\\.vue\\'"
  :config
  (initialize-js)
  )

(use-package scss-mode
  :ensure t
  )

(setq css-indent-offset 2)

(use-package rjsx-mode
  :ensure t
  :after js2-mode
  :load-path "unmanaged-packages/rjsx-mode/"
  :mode "\\.js\\'"
  :config
  (initialize-js)
  (add-hook 'rjsx-mode-hook #'flycheck-mode)
  )


(use-package highlight-indentation
  :load-path "unmanaged-packages/highlight-indentation-mode/"
  :config
  (add-hook 'python-mode-hook 'highlight-indentation-mode)
  )


;; (use-package guide-key
;;   :ensure t
;;   :defer t
;;   :config
;;   (progn
;;     (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "M-g" "C-c p"))
;;     (guide-key-mode 1)))
(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\'"
  )

(use-package flycheck-yamllint
  :ensure t
  :after yaml-mode
  :config
  (add-hook 'yaml-mode-hook #'flycheck-mode)
  )

(use-package ivy
  :ensure t
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  :bind
  ("C-s" . swiper)
  ("C-c C-r" . 'ivy-resume)
  ("C-x b" . 'ivy-switch-buffer))

(use-package counsel
  :ensure t
  :bind
  ("M-x" . 'counsel-M-x)
  ("C-x C-f" . 'counsel-find-file)
  ("<f1> f" . 'counsel-describe-function)
  ("<f1> v" . 'counsel-describe-variable)
  ("<f1> l" . 'counsel-find-library)
  ("<f2> i" . 'counsel-info-lookup-symbol)
  ("<f2> u" . 'counsel-unicode-char)

  ("C-c g" . 'counsel-git)
  ("C-c j" . 'counsel-git-grep)
  ("C-c k" . 'counsel-ag)
  ("C-x l" . 'counsel-locate))


(use-package python
  :ensure t
  :mode ("\\.py\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  )

(use-package pyenv-mode
  :ensure t
  :after python
  :config
  (pyenv-mode)
  )

(use-package pyenv-mode-auto
  :ensure t
  :after pyenv-mode)

(use-package flycheck
  :ensure t
  :bind
  ("s-[" . 'flycheck-previous-error)
  ("s-]" . 'flycheck-next-error)
  )

(use-package flycheck-pycheckers
  :ensure t
  :after (python flycheck)
  :init
  (add-hook 'python-mode-hook #'flycheck-pycheckers-setup)
  :config
  (setq flycheck-pycheckers-checkers '(flake8))
  )

(use-package yaml-mode
  :ensure t
  :mode (
	 ("\\.sls\\'" . yaml-mode)
	 ("\\.yaml\\'" . yaml-mode)
	 )
  )

;; (use-package pycoverage
;;   :ensure t)

;; TODO: Investigate usage of flx
;; (use-package flx
;;   :ensure t)

(use-package ivy-hydra
  :ensure t
  )

(use-package projectile
  :ensure t
  :after ivy
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action #'projectile-dired)

  :config
  ;; Might need to be moved somewhere else... ivy is not guaranteed to exist yet?
  (projectile-mode)
  (setq projectile-completion-system 'ivy)

  ;; NodeJS
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  ;; Python
  (add-to-list 'projectile-globally-ignored-directories "build")
  (add-to-list 'projectile-globally-ignored-directories "*.egg-info")

  ;; Fix projectile-discover-projects-in-directory.
  ;; Patched version is in v0.16, which is not released yet. Unclear when this
  ;; will be released. See https://github.com/bbatsov/projectile/issues/1165
  (defun projectile-discover-projects-in-directory (directory)
    "Discover any projects in DIRECTORY and add them to the projectile cache.
This function is not recursive and only adds projects with roots
at the top level of DIRECTORY."
    (interactive
     (list (read-directory-name "Starting directory: ")))
    (let ((subdirs (directory-files directory t)))
      (mapcar
       (lambda (dir)
         (when (and (file-directory-p dir)
                    (not (member (file-name-nondirectory dir) '(".." "."))))
           (let ((default-directory dir)
                 (projectile-cached-project-root dir))
             (when (projectile-project-p)
               (projectile-add-known-project (projectile-project-root))))))
       subdirs))))

(use-package counsel-projectile
  :ensure t
  :after (counsel projectile)
  :config
  (counsel-projectile-mode)
)


;; (use-package magit
;;   :ensure t)

;; (use-package monky
;;   :ensure t)

;; (use-package linum-relative
;;   :ensure t)

;; Post-save Hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(use-package ox-md)
(use-package ox-jira
  :ensure t)

(use-package org
  :ensure t
  :init
  (setq org-hide-leading-stars t)
  (setq org-log-done 'time)
  (setq org-directory "~/Documents/org")
  (setq org-default-notes-file (concat org-directory "/misc.org"))
  ;; :bind-keymap
  ;; ("C-c c" . 'org-capture)
  :bind
  ("C-c a" . 'org-agenda)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (sh . t)
     (sql . t)))
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "python")
	     (string= lang "sql"))))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

  ;; (setq org-capture-templates '(
  ;; 				'("i" "Tickets" "entry"
  ;; 				  '("file+headline" "tickets.org" "Unsorted")
  ;; 				  "* Ticket %?")
  ;; 				'("p" "Personal things to do" "entry"
  ;; 				  '("file+headline" "" "Tasks")
  ;; 				  "* %? (%T)"))))
)

;; ;; Package Configs

;; ;; Enable mouse support wooooooo
;; ;; Stolen from https://iterm2.com/faq.html, "Q: How do I make the mouse work in emacs", but should expand more.
;; (require 'mwheel)
;; (require 'mouse)
;; (xterm-mouse-mode t)
;; (mouse-wheel-mode t)

;; (global-whitespace-mode t)

(use-package org-jira
  :ensure t
  :init
  (setq jiralib-url "https://jira.truveris.com/")
  :after org
  )

(use-package toml-mode
  :ensure t)

(use-package rg
  :ensure t
  :config
  (rg-enable-default-bindings))

(when (fboundp 'winner-mode)
  (winner-mode 1))

;; Linum mode: for line numbers
;; (add-hook 'find-file-hook (lambda () (linum-relative-on)))
(setq linum-format "%d ")

;; (use-package linum-relative
;;   :delight
;;   :ensure t
;;   :config
;;   (linum-relative-global-mode t)
;;   )

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; ;; Helper Functions

(defun region-pbcopy (beginning end)
  "Run the `pbcopy` shell command on a region.

BEGINNING: The first character to copy.
END: the last character to copy."
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end)
                         )
                 (list (point-min) (point-min)))
               )
  (let ((selection (buffer-substring-no-properties beginning end)))
    (if (= (length selection) 0)
        (message "Nothing selected")
      (shell-command-on-region beginning end "pbcopy")
      (message
       (format "Copied %d character(s) to clipboard" (length selection)))
      )
    )
  )


(use-package go-mode
  :ensure)

(use-package js2-mode
  :ensure)

;; Stolen from https://emacs.stackexchange.com/a/18884
(defvar my-ansi-escape-re
  (rx (or ?\233 (and ?\e ?\[))
      (zero-or-more (char (?0 . ?\?)))
      (zero-or-more (char ?\s ?- ?\/))
      (char (?@ . ?~))))

(defun my-nuke-ansi-escapes (beg end)
  (save-excursion
    (goto-char beg)
    (while (re-search-forward my-ansi-escape-re end t)
      (replace-match ""))))

(defun my-eshell-nuke-ansi-escapes ()
  (my-nuke-ansi-escapes eshell-last-output-start eshell-last-output-end))

(add-hook 'eshell-output-filter-functions 'my-eshell-nuke-ansi-escapes t)


;; Custom Keybinds

(global-set-key (kbd "<f5>") 'sort-lines)
;; (global-set-key [mouse-4] 'previous-line)
;; (global-set-key [mouse-5] 'next-line)
;; (global-set-key (kbd "C-x !") 'maximize-window)

;; S-c already has a useful binding
;; (global-set-key (kbd "M-P") 'region-pbcopy)
;; ;; Programming
;; (global-set-key (kbd "C-x /") 'comment-line)

;; ;; Disable Commands
;; (put 'downcase-region 'disabled nil)

;; (toggle-frame-maximized)

;; ;; (custom-set-variables
;; ;;  ;; custom-set-variables was added by Custom.
;; ;;  ;; If you edit it by hand, you could mess it up, so be careful.
;; ;;  ;; Your init file should contain only one such instance.
;; ;;  ;; If there is more than one, they won't work right.
;; ;;  '(package-selected-packages
;; ;;    (quote
;; ;;     (pyenv-mode pyenv-mode-auto counsel counsel-projectile ivy-dired-history ivy company company-jedi projectile ini-mode json-mode launchctl mmm-jinja2 mmm-mako mmm-mode mode-icons nginx-mode on-screen linum-relative indent-guide devdocs dimmer yaml-mode xclip yasnippet-snippets yasnippet csv-mode metar minimap))))
;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(ansi-color-faces-vector
;;    [default default default italic underline success warning error])
;;  '(counsel-find-file-ignore-regexp
;;    "\\(?:\\.\\(?:aux\\|b\\(?:bl\\|in\\|lg\\|zr/\\)\\|c\\(?:lass\\|ps?\\)\\|d\\(?:\\(?:64fs\\|fs\\|x\\(?:\\(?:32\\|64\\)fs\\)?\\)l\\)\\|elc\\|f\\(?:asl?\\|mt\\|ns?\\|\\(?:x\\(?:\\(?:32\\|64\\)f\\)\\)?sl\\)\\|g\\(?:it/\\|[lm]o\\)\\|hg/\\|idx\\|kys?\\|l\\(?:bin\\|ib\\|o[ft]\\|x\\(?:\\(?:32\\|64\\)fsl\\)\\|[ano]\\)\\|m\\(?:em\\|o\\)\\|p\\(?:64fsl\\|fsl\\|gs?\\|y[co]\\)\\|s\\(?:o\\|parcf\\|vn/\\|x\\(?:\\(?:32\\|64\\)fsl\\)\\)\\|t\\(?:fm\\|oc\\|ps?\\)\\|ufsl\\|vrs?\\|wx\\(?:\\(?:32\\|64\\)fsl\\)\\|x86f\\|[ao]\\)\\|CVS/\\|_\\(?:\\(?:MTN\\|darcs\\)/\\)\\|~\\)")
;;  '(counsel-projectile-mode t nil (counsel-projectile))
;;  '(counsel-projectile-org-capture-templates
;;    (quote
;;     (("d" "Detail" entry
;;       (file "tickets.org")
;;       "*** %?
;;    %a")
;;      ("t" "Task" entry
;;       (file+headline "notes.org" "Tasks")
;;       "* TODO %?
;;   %u
;;   %a"))))
;;  '(custom-safe-themes
;;    (quote
;;     ("e11569fd7e31321a33358ee4b232c2d3cf05caccd90f896e1df6cab228191109" default)))
;;  '(debug-ignored-errors
;;    (quote
;;     ("^Invalid face:? " "^Exit the snippet first!$" search-failed beginning-of-line beginning-of-buffer end-of-line end-of-buffer end-of-file buffer-read-only file-supersession mark-inactive user-error)))
;;  '(flycheck-pycheckers-checkers (quote (flake8 pyflakes)))
;;  '(global-whitespace-mode t)
;;  '(grep-find-command (quote ("find . -type f -exec rg -nH -e  {} +" . 35)))
;;  '(ido-enable-flex-matching t)
;;  '(ido-everywhere t)
;;  '(ido-ignore-directories (quote ("\\`CVS/" "\\`\\.\\./" "\\`\\./" ".*\\.egg-info/")))
;;  '(ivy-fixed-height-minibuffer t)
;;  '(org-agenda-files
;;    (quote
;;     ("~/Documents/org/notes.org" "~/Documents/org/tickets.org")))
;;  '(org-babel-load-languages (quote ((emacs-lisp . t) (sh . t))))
;;  '(package-selected-packages
;;    (quote
;;     (lsp-ui lsp-python company-lsp lsp-mode emmet-mode js2-mode vue-mode ibuffer-projectile flycheck-pycheckers csharp-mode csharp zenburn-theme guide-key free-keys pycoverage linum-relative monky magit flycheck yas-snippets use-package)))
;;  '(projectile-enable-caching t)
;;  '(projectile-find-dir-hook (quote (projectile-track-known-projects-find-file-hook)))
;;  '(projectile-globally-ignored-directories
;;    (quote
;;     (".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "htmlcov" "pytruveris.egg-info")))
;;  '(projectile-mode t nil (projectile))
;;  '(tab-always-indent (quote complete))
;;  '(tab-stop-list nil)
;;  '(whitespace-style
;;    (quote
;;     (face trailing tabs spaces lines-tail newline empty space-after-tab space-before-tab space-mark tab-mark newline-mark))))


;; ;; (setq custom-faces (list ()))

;; ;; (when window-system
;; ;;   (tool-bar-mode -1)
;; ;;   (add-to-list
;; ;;    custom-faces
;; ;;    '(whitespace-space ((t (:background "gray100" :foreground "lightgray"))))
;; ;;    )
;; ;;   )


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(powerline-active2 ((t (:inherit mode-line :background "#404040"))))
 '(powerline-inactive2 ((t (:inherit mode-line-inactive :background "#5a5a5a"))))
 '(whitespace-line ((t (:background "#3F3F3F" :foreground "#DC8CC3")))))

;; (setq tab-width 4) ; or any other preferred value
;; (defvaralias 'c-basic-offset 'tab-width)
;; (defvaralias 'cperl-indent-level 'tab-width)
(put 'narrow-to-region 'disabled nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#515151" "#f2777a" "#99cc99" "#ffcc66" "#6699cc" "#cc99cc" "#66cccc" "#cccccc"))
 '(beacon-color "#f2777a")
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(custom-enabled-themes (quote (sanityinc-tomorrow-night)))
 '(custom-safe-themes
   (quote
    ("06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" default)))
 '(fci-rule-color "#515151")
 '(flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
 '(flycheck-eslint-args nil)
 '(flycheck-javascript-eslint-executable nil)
 '(frame-background-mode (quote dark))
 '(grep-find-ignored-files
   (quote
    (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.dfsl" "*.pfsl" "*.d64fsl" "*.p64fsl" "*.lx64fsl" "*.lx32fsl" "*.dx64fsl" "*.dx32fsl" "*.fx64fsl" "*.fx32fsl" "*.sx64fsl" "*.sx32fsl" "*.wx64fsl" "*.wx32fsl" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "*.orig" "#*#")))
 '(inhibit-startup-screen t)
 '(ivy-count-format "(%d/%d) ")
 '(ivy-preferred-re-builders
   (quote
    ((ivy--regex-plus . "ivy")
     (ivy--regex-ignore-order . "order")
     (ivy--regex-fuzzy . "fuzzy"))))
 '(ivy-use-virtual-buffers t)
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(org-agenda-files
   (quote
    ("~/Documents/org/arowana.org" "~/Documents/org/notes.org" "~/Documents/org/tickets.org")))
 '(org-capture-templates
   (quote
    (("i" "Tickets" entry
      (file+headline "tickets.org" "Unsorted")
      "* Ticket %?")
     ("p" "Personal things to do" entry
      (file+headline "" "Tasks")
      "* %? (%T)"))))
 '(package-enable-at-startup nil)
 '(package-selected-packages
   (quote
    (toml-mode dired-x company-ctags ggtags gtags gtags-mode counsel-gtags ivy-hydra go-mode ox-jira org-jira color-theme-sanityinc-tomorrow salt-mode flycheck-yamllint markdown-mode magit scss-mode vue-mode rjsx-mode js2-mode delight rg ox-trac smooth-scrolling show-paren-mode powerline mmm-mako mmm-jinja2 linum-relative yaml-mode flycheck-pycheckers yasnippet-snippets yasnippet zenburn-theme use-package pyenv-mode-auto lsp-ui lsp-python ibuffer-projectile counsel-projectile company-lsp)))
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(quote
   (package-selected-packages
    (quote
     (projectile use-package))))
 '(show-paren-mode t)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#f2777a")
     (40 . "#f99157")
     (60 . "#ffcc66")
     (80 . "#99cc99")
     (100 . "#66cccc")
     (120 . "#6699cc")
     (140 . "#cc99cc")
     (160 . "#f2777a")
     (180 . "#f99157")
     (200 . "#ffcc66")
     (220 . "#99cc99")
     (240 . "#66cccc")
     (260 . "#6699cc")
     (280 . "#cc99cc")
     (300 . "#f2777a")
     (320 . "#f99157")
     (340 . "#ffcc66")
     (360 . "#99cc99"))))
 '(vc-annotate-very-old-color nil))
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  )
(put 'upcase-region 'disabled nil)

;; Extract string delimited by quotes
;; ^.*\("[^"]+"\),.*$ \1

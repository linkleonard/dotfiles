#!/bin/bash
set -e

Z_DIR=$HOME/Documents/z
Z_SYMLINK=$HOME/bin/z
BASH_PREEXEC_SCRIPT=$HOME/.bash-preexec.sh
EMACS_UNMANAGED_PACKAGES_DIR=$HOME/.emacs.d/unmanaged-packages
RJSX_PACKAGE_DIR=$EMACS_UNMANAGED_PACKAGES_DIR/rjsx-mode

CLONE_DESTINATIONS=(
    $HOME/bin
    $EMACS_UNMANAGED_PACKAGES_DIR
)

for directory in "${CLONE_DESTINATIONS[@]}"; do
    mkdir -p $directory;
done;

things_to_clone=(
    "https://github.com/rupa/z.git $Z_DIR"
    # Used to address
    # https://github.com/felipeochoa/rjsx-mode/issues/67 as it has not
    # been released yet.
    "git@github.com:felipeochoa/rjsx-mode.git $RJSX_PACKAGE_DIR"
)

for thing in "${things_to_clone[@]}"; do
    read repository destination <<< "$thing";
    if [[ ! -a $destination ]]; then
        echo git clone $repository $destination
        git clone $repository $destination
    fi;
done;

if [[ ! -a $Z_SYMLINK ]]; then
    ln -s $Z_DIR/z.sh $Z_SYMLINK;
fi;

if [[ ! -a $BASH_PREEXEC_SCRIPT ]]; then
    curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o $BASH_PREEXEC_SCRIPT;
fi;

which lsb_release && lsb_release -a 2>/dev/null | grep -i ubuntu > /dev/null
is_ubuntu=$?

if [[ $is_ubuntu == "0" ]]; then
    sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
	 libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
	 xz-utils tk-dev;
fi;

if [[ ! -a $HOME/.pyenv ]]; then
    curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash;
fi;


if [[ ! -a $HOME/n ]]; then
    curl -L https://git.io/n-install | bash;
fi;


DOTFILES_DIR=$HOME/.dotfiles
# Install dotfiles into home directory

ln -sv $DOTFILES_DIR/shell/bash_profile $HOME/.bash_profile || true
ln -sv $DOTFILES_DIR/hg/hgrc $HOME/.hgrc || true
ln -sv $DOTFILES_DIR/hg/hgignore $HOME/.hgignore || true
ln -sv $DOTFILES_DIR/git/gitignore_global $HOME/.gitignore_global || true
ln -sv $DOTFILES_DIR/emacs/emacs  $HOME/.emacs || true
ln -sv $DOTFILES_DIR/emacs/emacs.d  $HOME/.emacs.d || true
